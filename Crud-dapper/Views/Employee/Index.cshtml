@using PagedList;
@using PagedList.Mvc;


@model IPagedList<Crud_dapper.Models.EmployeeModel>

@{
    ViewBag.Title = "Index";

    @*List<SelectListItem> l1= new List<SelectListItem>
            l1.Add(new SelectListItem { Text = "IT", Value = "IT" });
        l1.Add(new SelectListItem { Text = "IT", Value = "IT" });
        l1.Add(new SelectListItem { Text = "IT", Value = "IT" });*@

}

<h2><em>Employee List</em></h2>
<div class="row">
    <div class="col-xs-5 ">
        @Html.ActionLink("Deleted Employee", "DeletedEmployee", new { }, new {@class= "btn btn-primary"})
        @Html.ActionLink("Create New", "Add", new { }, new { @class = "btn btn-primary" })
    </div>
    <div class="col-xs-offset-8">
        @using (Html.BeginForm("Index", "Employee", FormMethod.Get))
        {
        <p>
            @Html.TextBox("SearchString", ViewBag.CurrentFilter as string)
            @*<input type="submit" value="Search" class=" btn btn-primary" />*@
            @Html.ActionLink("Search", "Index", new { sortOrder = ViewBag.SortingName, currentFilter = ViewBag.CurrentFilter, page = ViewBag.pageNo, pageSize = ViewBag.psize }, new { @class = "btn btn-primary" })
            @Html.ActionLink("Reset", "Index", new { }, new { @class = "btn btn-primary" })
        </p>

        }
    </div>

</div>

@*Html.TextBox("search")
    @Html.ActionLink("Search", "Index")
    < input type = "submit"
        name = "submit"
        value = "Search" / >*@

<div class="table-responsive custom-table-responsive">

    <table class="table table-hover table-striped table-bordered">
        <tr class=" text-center text-primary bg-info">
            <th class="bg-info">
                SR. NO.
            </th>
            @* <th>
                    @Html.DisplayNameFor(model => model.EmployeeID)
                </th>*@
            <th class="bg-info " scope="col">

                @Html.ActionLink("Name", "Index", new { sortOrder = ViewBag.SortingName, currentFilter = ViewBag.CurrentFilter, page = ViewBag.pageNo, pageSize = ViewBag.psize })
            </th>
            <th class="bg-info" scope="col">
                @Html.ActionLink("Department", "Index", new { sortOrder = ViewBag.SortingDepartment, currentFilter = ViewBag.CurrentFilter, page = ViewBag.pageNo, pageSize = ViewBag.psize })

            </th>
            <th class="bg-info" scope="col">
                @Html.DisplayNameFor(model => model.First().Gender)
            </th>
            <th class="bg-info " scope="col">
                @Html.ActionLink("Email", "Index", new { sortOrder = ViewBag.SortingEmail, currentFilter = ViewBag.CurrentFilter, page = ViewBag.pageNo, pageSize = ViewBag.psize })
            </th>
            <th class="bg-info" scope="col">
                @Html.DisplayNameFor(model => model.First().Skills)
            </th>

            <th class="bg-info" scope="col">
                Action
            </th>
        </tr>

        @foreach (var item in Model)
        {
            <tr>
                <td>
                    
                    @(Model.ToList().IndexOf(item) + 1+ @ViewBag.SerialNumber)
                </td>

                @*<td>
                        @Html.DisplayFor(modelItem => item.EmployeeID)
                    </td>*@
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Department)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Gender)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Email)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Skills)
                </td>
                <td>

                    @Html.ActionLink("Edit", "Edit", new { id = item.EmployeeID }, new { @class = "btn btn-success" }) |

                    @Html.ActionLink("Delete", "ConfirmDelete", new { id = item.EmployeeID }, new { @class = "btn btn-danger" })

                    @*Html.ActionLink("Search", "Search", new { search = item.Search})*@

                </td>
            </tr>
        }

    </table>

    @using (Html.BeginForm("Index", "Employee", FormMethod.Get))

    {
<div id='Paging'>
    Page @(Model.PageCount< Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount
    @Html.PagedListPager(Model, page => Url.Action("Index", "Employee",
    new { sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter, page, pageSize = ViewBag.psize }))
</div>
<div>
    @Html.PagedListPager(Model, pageSize => Url.Action("Index", "Employee",
   new { sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter, page = ViewBag.pageNo, pageSize }))

    Page Size: @Html.DropDownList("pageSize")
    @*Html.PagedListPager(Model, page => Url.Action("Index", "Employee", new { page, searchString = Request.QueryString["search"] }))*@
</div>
    }

</div>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
    <script type="text/javascript"></script>
    <script>
        $(document).ready(function () {
             $("#pageSize").change(function () {
                    var url = "@Url.Action("Index", "Employee")?pageSize=" + this.value;
                    location.href = url
                });
         });


    </script>
